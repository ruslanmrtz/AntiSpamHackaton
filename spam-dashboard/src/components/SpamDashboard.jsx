import { useState, useEffect, useRef } from 'react'
import SpamCard from './SpamCard'
import SpamModal from './SpamModal'
import { NotificationContainer } from './NotificationToast'
import { useNotifications } from '../hooks/useNotifications'
import { API_URLS, debugLog } from '../config/env'

const SpamDashboard = () => {
  const [spamEmails, setSpamEmails] = useState([])
  const [selectedEmail, setSelectedEmail] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [lastUpdated, setLastUpdated] = useState(null)
  
  // –•—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const {
    notifications,
    removeNotification,
    notifyNewSpamEmail,
    notifyMultipleSpamEmails,
    notifySystemAlert
  } = useNotifications()
  
  // –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–∏—Å–µ–º
  const previousEmailsRef = useRef([])
  const isFirstLoadRef = useRef(true)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
  const detectNewEmails = (newEmails, previousEmails) => {
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (isFirstLoadRef.current) {
      isFirstLoadRef.current = false
      return []
    }

    // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (previousEmails.length === 0) {
      return []
    }

    const previousIds = new Set(previousEmails.map(email => email.id))
    const newFound = newEmails.filter(email => !previousIds.has(email.id))
    
    return newFound
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const playNotificationSound = () => {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
    const audioContext = new (window.AudioContext || window.webkitAudioContext)()
    const oscillator = audioContext.createOscillator()
    const gainNode = audioContext.createGain()
    
    oscillator.connect(gainNode)
    gainNode.connect(audioContext.destination)
    
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime)
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1)
    
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3)
    
    oscillator.start(audioContext.currentTime)
    oscillator.stop(audioContext.currentTime + 0.3)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
  const fetchSpamEmails = async () => {
    setIsLoading(true)
    debugLog('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º —Å:', API_URLS.SPAM_EMAILS)
    try {
      const response = await fetch(API_URLS.SPAM_EMAILS);
      
      if (response.ok) {
        const data = await response.json();
        
        // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
        const newEmails = detectNewEmails(data, previousEmailsRef.current)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∏—Å—å–º–∞ –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        previousEmailsRef.current = data
        
        data.reverse();
        setSpamEmails(data);
        setLastUpdated(new Date());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (newEmails.length > 0) {
          if (newEmails.length === 1) {
            notifyNewSpamEmail(newEmails[0])
          } else {
            notifyMultipleSpamEmails(newEmails.length)
          }
          
          // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
          try {
            playNotificationSound()
          } catch (soundError) {
            // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          }
        }
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', response.statusText);
        notifySystemAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
        setSpamEmails([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      notifySystemAlert('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
      setSpamEmails([]);
    } finally {
      setIsLoading(false)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchSpamEmails()
  }, [])

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(() => {
      fetchSpamEmails()
    }, 5000)

    return () => clearInterval(interval)
  }, [])

  const handleCardClick = (email) => {
    setSelectedEmail(email)
    setIsModalOpen(true)
  }

  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedEmail(null)
  }

  return (
    <div className="min-h-screen">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  üìß –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç–æ–≤—ã—Ö –ø–∏—Å–µ–º
                </h1>
                <p className="text-gray-600 mt-1">
                  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–ø–∞–º-–ø–∏—Å–µ–º
                </p>
              </div>
              <div className="text-right">
                <div className="flex items-center space-x-2">
                  {isLoading && (
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                  )}
                  <span className="text-sm text-gray-500">
                    –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 5 —Å–µ–∫
                  </span>
                </div>
                {lastUpdated && (
                  <p className="text-xs text-gray-400 mt-1">
                    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdated.toLocaleTimeString('ru-RU')}
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <span className="text-2xl">üö´</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">–í—Å–µ–≥–æ —Å–ø–∞–º-–ø–∏—Å–µ–º</p>
                <p className="text-2xl font-bold text-gray-900">{spamEmails.length}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <span className="text-2xl">‚ö†Ô∏è</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</p>
                <p className="text-2xl font-bold text-gray-900">
                  {spamEmails.filter(email => 
                    new Date(email.timestamp) > new Date(Date.now() - 3600000)
                  ).length}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <span className="text-2xl">üõ°Ô∏è</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</p>
                <p className="text-2xl font-bold text-green-600">–ê–∫—Ç–∏–≤–Ω–∞</p>
              </div>
            </div>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–∏—Å–µ–º */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ø–∞–º-–ø–∏—Å—å–º–∞
          </h2>
          
          {spamEmails.length === 0 ? (
            <div className="bg-white rounded-lg shadow-sm p-8 text-center border border-gray-200">
              <span className="text-6xl mb-4 block">üì≠</span>
              <p className="text-gray-500 text-lg">–°–ø–∞–º-–ø–∏—Å—å–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {spamEmails.map((email) => (
                <SpamCard
                  key={email.id}
                  email={email}
                  onClick={handleCardClick}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <SpamModal
        email={selectedEmail}
        isOpen={isModalOpen}
        onClose={closeModal}
      />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <NotificationContainer
        notifications={notifications}
        onRemoveNotification={removeNotification}
      />
    </div>
  )
}

export default SpamDashboard
